/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.qbteam.api;

import it.qbteam.model.AdministratorInfo;
import it.qbteam.model.Favorite;
import it.qbteam.model.Organization;
import it.qbteam.model.Permission;
import it.qbteam.model.Place;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "organization", description = "the organization API")
public interface OrganizationApi {

    /**
     * POST /organization/favorite/{userId}/add/{organizationId} : Adds a new organization to the user&#39;s favorite organization list.
     * Adds a new organization to the user&#39;s favorite organization list.  Only app users can access this end-point.
     *
     * @param userId ID of the user. It must be the same of the userId of the authenticated user. (required)
     * @param organizationId ID of an organization. (required)
     * @return Organization successfully added to the list of favorite.  The favorite record just added (including the organization) gets returned. (status code 201)
     *         or The user already added the organization to the list of favorite organizations. (status code 400)
     *         or The user is not authenticated. Nothing gets returned. (status code 401)
     *         or Administrators cannot have access. Nothing gets returned. (status code 403)
     *         or The organization could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Adds a new organization to the user's favorite organization list.", nickname = "addFavoriteOrganization", notes = "Adds a new organization to the user's favorite organization list.  Only app users can access this end-point.", response = Favorite.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization","favorite", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Organization successfully added to the list of favorite.  The favorite record just added (including the organization) gets returned.", response = Favorite.class),
        @ApiResponse(code = 400, message = "The user already added the organization to the list of favorite organizations."),
        @ApiResponse(code = 401, message = "The user is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 403, message = "Administrators cannot have access. Nothing gets returned."),
        @ApiResponse(code = 404, message = "The organization could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization/favorite/{userId}/add/{organizationId}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Favorite> addFavoriteOrganization(@ApiParam(value = "ID of the user. It must be the same of the userId of the authenticated user.",required=true) @PathVariable("userId") String userId,@Min(1L)@ApiParam(value = "ID of an organization.",required=true) @PathVariable("organizationId") Long organizationId);


    /**
     * POST /organization/administrator/bind : Bind an already existent administrator to the organization.
     * Bind an already existent administrator to the organization. Only web-app admininistrators can access this end-point.
     *
     * @param permission  (required)
     * @return Administrator binded successfully. The permission record gets returned. (status code 201)
     *         or The administrator is not authenticated. Nothing gets returned. (status code 401)
     *         or Users or administrator with viewer or manager permission cannot have access. Nothing gets returned. (status code 403)
     *         or The organization or the administrator could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Bind an already existent administrator to the organization.", nickname = "bindAdministratorToOrganization", notes = "Bind an already existent administrator to the organization. Only web-app admininistrators can access this end-point.", response = Permission.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization","permission","administrator", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Administrator binded successfully. The permission record gets returned.", response = Permission.class),
        @ApiResponse(code = 401, message = "The administrator is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 403, message = "Users or administrator with viewer or manager permission cannot have access. Nothing gets returned."),
        @ApiResponse(code = 404, message = "The organization or the administrator could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization/administrator/bind",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Permission> bindAdministratorToOrganization(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Permission permission);


    /**
     * POST /organization/administrator/create : Creates and binds a new administrator to the organization.
     * Creates and binds a new administrator to the current organization.  Only web-app administrators can access this end-point.
     *
     * @param administratorInfo  (required)
     * @return Administrator created and binded successfully. The permission record gets returned. (status code 201)
     *         or The administrator to be created has already an account. The process could not succeed. Nothing gets returned. (status code 400)
     *         or The administrator is not authenticated. Nothing gets returned. (status code 401)
     *         or Users or administrator with viewer or manager permission cannot have access. Nothing gets returned. (status code 403)
     *         or The organization could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Creates and binds a new administrator to the organization.", nickname = "createNewAdministratorToOrganization", notes = "Creates and binds a new administrator to the current organization.  Only web-app administrators can access this end-point.", response = Permission.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization","administrator", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Administrator created and binded successfully. The permission record gets returned.", response = Permission.class),
        @ApiResponse(code = 400, message = "The administrator to be created has already an account. The process could not succeed. Nothing gets returned."),
        @ApiResponse(code = 401, message = "The administrator is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 403, message = "Users or administrator with viewer or manager permission cannot have access. Nothing gets returned."),
        @ApiResponse(code = 404, message = "The organization could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization/administrator/create",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Permission> createNewAdministratorToOrganization(@ApiParam(value = "" ,required=true )  @Valid @RequestBody AdministratorInfo administratorInfo);


    /**
     * GET /organization/{organizationId}/administrator : Returns the list of administrators of the organization.
     * Returns the list of administrators of the organization. Only web-app admininistrators can access this end-point.
     *
     * @param organizationId ID of an organization. The administrator must have at least owner permission to the organization. (required)
     * @return Administrators&#39; information returned successfully. (status code 200)
     *         or The administrator is not authenticated. Nothing gets returned. (status code 401)
     *         or Users or administrator with viewer or manager permission cannot have access. Nothing gets returned. (status code 403)
     *         or The organization could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Returns the list of administrators of the organization.", nickname = "getAdministratorListOfOrganization", notes = "Returns the list of administrators of the organization. Only web-app admininistrators can access this end-point.", response = AdministratorInfo.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization","administrator", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Administrators' information returned successfully.", response = AdministratorInfo.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "The administrator is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 403, message = "Users or administrator with viewer or manager permission cannot have access. Nothing gets returned."),
        @ApiResponse(code = 404, message = "The organization could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization/{organizationId}/administrator",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AdministratorInfo>> getAdministratorListOfOrganization(@Min(1L)@ApiParam(value = "ID of an organization. The administrator must have at least owner permission to the organization.",required=true) @PathVariable("organizationId") Long organizationId);


    /**
     * GET /organization/favorite/{userId} : Gets the list of favorite organizations of a user.
     * Gets the list of favorite organizations of a user.  Only app users can access this end-point.
     *
     * @param userId ID of the user. It must be the same of the userId of the authenticated user. (required)
     * @return List of favorite organizations returned successfully. (status code 200)
     *         or List of favorite organizations is empty. Nothing gets returned. (status code 204)
     *         or The supplied userId is incorrect. Nothing gets returned. (status code 400)
     *         or The user or the administrator is not authenticated. Nothing gets returned. (status code 401)
     *         or Administrators cannot have access. Nothing gets returned. (status code 403)
     *         or List of organizations could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Gets the list of favorite organizations of a user.", nickname = "getFavoriteOrganizationList", notes = "Gets the list of favorite organizations of a user.  Only app users can access this end-point.", response = Organization.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization","favorite", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of favorite organizations returned successfully.", response = Organization.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "List of favorite organizations is empty. Nothing gets returned."),
        @ApiResponse(code = 400, message = "The supplied userId is incorrect. Nothing gets returned."),
        @ApiResponse(code = 401, message = "The user or the administrator is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 403, message = "Administrators cannot have access. Nothing gets returned."),
        @ApiResponse(code = 404, message = "List of organizations could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization/favorite/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Organization>> getFavoriteOrganizationList(@ApiParam(value = "ID of the user. It must be the same of the userId of the authenticated user.",required=true) @PathVariable("userId") String userId);


    /**
     * GET /organization/{organizationId} : Gets the available data for a single organization.
     * Gets the data available for a single organization.  Both app users and web-app admininistrators can access this end-point but,  app users can request information for all the organizations while web-app  administrators can only for the organizations they have access to.
     *
     * @param organizationId ID of an organization. (required)
     * @return Organization returned successfully. (status code 200)
     *         or The user or the administrator is not authenticated. Nothing gets returned. (status code 401)
     *         or The organization could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Gets the available data for a single organization.", nickname = "getOrganization", notes = "Gets the data available for a single organization.  Both app users and web-app admininistrators can access this end-point but,  app users can request information for all the organizations while web-app  administrators can only for the organizations they have access to.", response = Organization.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Organization returned successfully.", response = Organization.class),
        @ApiResponse(code = 401, message = "The user or the administrator is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 404, message = "The organization could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization/{organizationId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Organization> getOrganization(@Min(1L)@ApiParam(value = "ID of an organization.",required=true) @PathVariable("organizationId") Long organizationId);


    /**
     * GET /organization : Returns the list of all organizations.
     * Returns the list of all organizations available in the system. The list can be empty. Only app users can access this end-point.
     *
     * @return List of all organizations is non-empty and gets returned successfully. (status code 200)
     *         or List of all organizations is empty. Nothing gets returned. (status code 204)
     *         or The user is not authenticated. Nothing gets returned. (status code 401)
     *         or Administrators cannot have access. Nothing gets returned. (status code 403)
     *         or List of all organizations could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Returns the list of all organizations.", nickname = "getOrganizationList", notes = "Returns the list of all organizations available in the system. The list can be empty. Only app users can access this end-point.", response = Organization.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of all organizations is non-empty and gets returned successfully.", response = Organization.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "List of all organizations is empty. Nothing gets returned."),
        @ApiResponse(code = 401, message = "The user is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 403, message = "Administrators cannot have access. Nothing gets returned."),
        @ApiResponse(code = 404, message = "List of all organizations could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Organization>> getOrganizationList();


    /**
     * GET /organization/permission/{administratorId} : Gets the list of permission that an administrator has permissions to view/manage/own.
     * Gets the list of organizations that an administrator has permissions to view/manage/own. Only web-app admininistrators can access this end-point.
     *
     * @param administratorId ID of the administrator. It must be the same of the administratorId of the authenticated administrator. (required)
     * @return List of permissions returned successfully. (status code 200)
     *         or List of permissions is empty. Nothing gets returned. (status code 204)
     *         or The user or the administrator is not authenticated. Nothing gets returned. (status code 401)
     *         or Administrators cannot have access. Nothing gets returned. (status code 403)
     *         or List of organizations could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Gets the list of permission that an administrator has permissions to view/manage/own.", nickname = "getPermissionList", notes = "Gets the list of organizations that an administrator has permissions to view/manage/own. Only web-app admininistrators can access this end-point.", response = Permission.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization","permission","administrator", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of permissions returned successfully.", response = Permission.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "List of permissions is empty. Nothing gets returned."),
        @ApiResponse(code = 401, message = "The user or the administrator is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 403, message = "Administrators cannot have access. Nothing gets returned."),
        @ApiResponse(code = 404, message = "List of organizations could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization/permission/{administratorId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Permission>> getPermissionList(@ApiParam(value = "ID of the administrator. It must be the same of the administratorId of the authenticated administrator.",required=true) @PathVariable("administratorId") String administratorId);


    /**
     * GET /organization/{organizationId}/place : Returns the list of places of the organization.
     * Returns the list of places of the organization. Both app users and web-app admininistrators can access this end-point.
     *
     * @param organizationId ID of an organization. (required)
     * @return Place list of organization returned successfully. (status code 200)
     *         or Place list of organization is empty. Nothing gets returned. (status code 204)
     *         or The administrator or the user is not authenticated. Nothing gets returned. (status code 401)
     *         or The organization could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Returns the list of places of the organization.", nickname = "getPlaceListOfOrganization", notes = "Returns the list of places of the organization. Both app users and web-app admininistrators can access this end-point.", response = Place.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization","place", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Place list of organization returned successfully.", response = Place.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "Place list of organization is empty. Nothing gets returned."),
        @ApiResponse(code = 401, message = "The administrator or the user is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 404, message = "The organization could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization/{organizationId}/place",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Place>> getPlaceListOfOrganization(@Min(1L)@ApiParam(value = "ID of an organization.",required=true) @PathVariable("organizationId") Long organizationId);


    /**
     * DELETE /organization/favorite/{userId}/remove/{organizationId} : Removes the organization from the user&#39;s favorite organization list.
     * Removes the organization from the user&#39;s favorite organization list. Only app users can access this end-point.
     *
     * @param userId ID of the user. It must be the same of the userId of the authenticated user. (required)
     * @param organizationId ID of an organization. (required)
     * @return Organization successfully removed from the list of favorites. (status code 205)
     *         or The organization is not part of the list of favorite organizations. (status code 400)
     *         or The user is not authenticated. Nothing gets returned. (status code 401)
     *         or Administrators cannot have access. Nothing gets returned. (status code 403)
     *         or The organization could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Removes the organization from the user's favorite organization list.", nickname = "removeFavoriteOrganization", notes = "Removes the organization from the user's favorite organization list. Only app users can access this end-point.", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization","favorite", })
    @ApiResponses(value = { 
        @ApiResponse(code = 205, message = "Organization successfully removed from the list of favorites."),
        @ApiResponse(code = 400, message = "The organization is not part of the list of favorite organizations."),
        @ApiResponse(code = 401, message = "The user is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 403, message = "Administrators cannot have access. Nothing gets returned."),
        @ApiResponse(code = 404, message = "The organization could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization/favorite/{userId}/remove/{organizationId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeFavoriteOrganization(@ApiParam(value = "ID of the user. It must be the same of the userId of the authenticated user.",required=true) @PathVariable("userId") String userId,@Min(1L)@ApiParam(value = "ID of an organization.",required=true) @PathVariable("organizationId") Long organizationId);


    /**
     * POST /organization/{organizationId}/requestdeletion : Sends a deletion request to the system. The request will be examined by Stalker administrators.
     * Sends a deletion request to the system.  The request will be examined by Stalker administrators. Only web-app admininistrators can access this end-point.
     *
     * @param organizationId ID of an organization. The administrator must have at least owner permission to the organization. (required)
     * @param requestReason Request reason for the deletion request. (required)
     * @return Request sent successfully. Nothing gets returned. (status code 204)
     *         or The administrator is not authenticated. Nothing gets returned. (status code 401)
     *         or Users or administrator with viewer or manager permission cannot have access. Nothing gets returned. (status code 403)
     *         or The organization could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Sends a deletion request to the system. The request will be examined by Stalker administrators.", nickname = "requestDeletionOfOrganization", notes = "Sends a deletion request to the system.  The request will be examined by Stalker administrators. Only web-app admininistrators can access this end-point.", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Request sent successfully. Nothing gets returned."),
        @ApiResponse(code = 401, message = "The administrator is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 403, message = "Users or administrator with viewer or manager permission cannot have access. Nothing gets returned."),
        @ApiResponse(code = 404, message = "The organization could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization/{organizationId}/requestdeletion",
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> requestDeletionOfOrganization(@Min(1L)@ApiParam(value = "ID of an organization. The administrator must have at least owner permission to the organization.",required=true) @PathVariable("organizationId") Long organizationId,@ApiParam(value = "Request reason for the deletion request.", required=true) @RequestParam(value="requestReason", required=true)  String requestReason);


    /**
     * POST /organization/administrator/unbind : Unbind an administrator to the organization.
     * Unbind an administrator to the organization. Only web-app admininistrators can access this end-point.
     *
     * @param permission  (required)
     * @return Administrator unbinded successfully. Nothing gets returned. (status code 204)
     *         or The administrator is not authenticated. Nothing gets returned. (status code 401)
     *         or Users or administrator with viewer or manager permission cannot have access. Nothing gets returned. (status code 403)
     *         or The organization or the administrator could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Unbind an administrator to the organization.", nickname = "unbindAdministratorFromOrganization", notes = "Unbind an administrator to the organization. Only web-app admininistrators can access this end-point.", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization","permission","administrator", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Administrator unbinded successfully. Nothing gets returned."),
        @ApiResponse(code = 401, message = "The administrator is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 403, message = "Users or administrator with viewer or manager permission cannot have access. Nothing gets returned."),
        @ApiResponse(code = 404, message = "The organization or the administrator could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization/administrator/unbind",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> unbindAdministratorFromOrganization(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Permission permission);


    /**
     * POST /organization/administrator/update : Update the permission for an already existent administrator in the organization.
     * Update the permission for an already existent administrator in the organization. Only web-app admininistrators can access this end-point.
     *
     * @param permission  (required)
     * @return Administrator&#39;s permissions updated successfully. The permission record gets returned. (status code 201)
     *         or Only the permission can be changed. The request was not satisfied. Nothing gets returned. (status code 400)
     *         or The administrator is not authenticated. Nothing gets returned. (status code 401)
     *         or Users or administrator with viewer or manager permission cannot have access. Nothing gets returned. (status code 403)
     *         or The organization or the administrator could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Update the permission for an already existent administrator in the organization.", nickname = "updateAdministratorPermission", notes = "Update the permission for an already existent administrator in the organization. Only web-app admininistrators can access this end-point.", response = Permission.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization","permission","administrator", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Administrator's permissions updated successfully. The permission record gets returned.", response = Permission.class),
        @ApiResponse(code = 400, message = "Only the permission can be changed. The request was not satisfied. Nothing gets returned."),
        @ApiResponse(code = 401, message = "The administrator is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 403, message = "Users or administrator with viewer or manager permission cannot have access. Nothing gets returned."),
        @ApiResponse(code = 404, message = "The organization or the administrator could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization/administrator/update",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Permission> updateAdministratorPermission(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Permission permission);


    /**
     * PUT /organization/{organizationId} : Updates one or more properties of an organization.
     * Updates one or more properties of an organization.  Only web-app administrators (if they have the correct access rights) can access this end-point.
     *
     * @param organizationId ID of an organization. (required)
     * @param organization  (required)
     * @return Organization updated successfully. The updated organization gets returned. (status code 200)
     *         or The inserted data has some issues. Nothing gets returned. (status code 400)
     *         or The administrator is not authenticated. Nothing gets returned. (status code 401)
     *         or Users cannot have access. Nothing gets returned. (status code 403)
     *         or The organization could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Updates one or more properties of an organization.", nickname = "updateOrganization", notes = "Updates one or more properties of an organization.  Only web-app administrators (if they have the correct access rights) can access this end-point.", response = Organization.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Organization updated successfully. The updated organization gets returned.", response = Organization.class),
        @ApiResponse(code = 400, message = "The inserted data has some issues. Nothing gets returned."),
        @ApiResponse(code = 401, message = "The administrator is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 403, message = "Users cannot have access. Nothing gets returned."),
        @ApiResponse(code = 404, message = "The organization could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization/{organizationId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Organization> updateOrganization(@Min(1L)@ApiParam(value = "ID of an organization.",required=true) @PathVariable("organizationId") Long organizationId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Organization organization);


    /**
     * PUT /organization/{organizationId}/trackingArea : Updates the coordinates of the tracking area of an organization.
     * Updates the coordinates of the tracking area of an organization. Only web-app admininistrators can access this end-point.
     *
     * @param organizationId ID of an organization. The administrator must have at least manager permission to the organization. (required)
     * @param trackingArea JSON representation of a tracking trackingArea. (required)
     * @return The tracking area of the organization was updated successfully. The organization gets returned. (status code 200)
     *         or The new tracking area does not respect the area constraints for the organization. Nothing gets returned. (status code 400)
     *         or The administrator is not authenticated. Nothing gets returned. (status code 401)
     *         or Users or administrator with viewer permission cannot have access. Nothing gets returned. (status code 403)
     *         or The organization could not be found. Nothing gets returned. (status code 404)
     */
    @ApiOperation(value = "Updates the coordinates of the tracking area of an organization.", nickname = "updateTrackingArea", notes = "Updates the coordinates of the tracking area of an organization. Only web-app admininistrators can access this end-point.", response = Organization.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "organization", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The tracking area of the organization was updated successfully. The organization gets returned.", response = Organization.class),
        @ApiResponse(code = 400, message = "The new tracking area does not respect the area constraints for the organization. Nothing gets returned."),
        @ApiResponse(code = 401, message = "The administrator is not authenticated. Nothing gets returned."),
        @ApiResponse(code = 403, message = "Users or administrator with viewer permission cannot have access. Nothing gets returned."),
        @ApiResponse(code = 404, message = "The organization could not be found. Nothing gets returned.") })
    @RequestMapping(value = "/organization/{organizationId}/trackingArea",
        produces = { "application/json" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.PUT)
    ResponseEntity<Organization> updateTrackingArea(@Min(1L)@ApiParam(value = "ID of an organization. The administrator must have at least manager permission to the organization.",required=true) @PathVariable("organizationId") Long organizationId,@ApiParam(value = "JSON representation of a tracking trackingArea.", required=true) @RequestParam(value="trackingArea", required=true)  String trackingArea);

}
