/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.qbteam.api;

import it.qbteam.model.OrganizationPresenceCounter;
import it.qbteam.model.PlacePresenceCounter;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "presence", description = "the presence API")
public interface PresenceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /presence/{organizationId} : Gets the number of presences in an organization given its organizationId.
     * Gets the number of presences in an organization given its organizationId.
     *
     * @param organizationId ID of an organization. (required)
     * @return Organization presence counter returned successfully. (status code 200)
     *         or Organization presence counter not found. (status code 400)
     */
    @ApiOperation(value = "Gets the number of presences in an organization given its organizationId.", nickname = "getOrganizationPresenceCounterById", notes = "Gets the number of presences in an organization given its organizationId.", response = OrganizationPresenceCounter.class, tags={ "presence", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Organization presence counter returned successfully.", response = OrganizationPresenceCounter.class),
        @ApiResponse(code = 400, message = "Organization presence counter not found.") })
    @RequestMapping(value = "/presence/{organizationId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<OrganizationPresenceCounter> getOrganizationPresenceCounterById(@ApiParam(value = "ID of an organization.",required=true) @PathVariable("organizationId") Long organizationId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"organizationId\" : 0, \"counter\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /presence/{placeId} : Gets the number of presences in a place given its placeId.
     * Gets the number of presences in a place given its placeId.
     *
     * @param placeId ID of a place. (required)
     * @return Place presence counter returned successfully. (status code 200)
     *         or Place presence counter not found. (status code 400)
     */
    @ApiOperation(value = "Gets the number of presences in a place given its placeId.", nickname = "getPlacePresenceCounterById", notes = "Gets the number of presences in a place given its placeId.", response = PlacePresenceCounter.class, tags={ "presence", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Place presence counter returned successfully.", response = PlacePresenceCounter.class),
        @ApiResponse(code = 400, message = "Place presence counter not found.") })
    @RequestMapping(value = "/presence/{placeId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PlacePresenceCounter> getPlacePresenceCounterById(@ApiParam(value = "ID of a place.",required=true) @PathVariable("placeId") Long placeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"placeId\" : 0, \"counter\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
