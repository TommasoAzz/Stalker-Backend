/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.qbteam.api;

import it.qbteam.model.OrganizationAuthenticatedAccess;
import it.qbteam.model.PlaceAuthenticatedAccess;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "access", description = "the access API")
public interface AccessApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /access/organization/{organizationId}/authenticated : Returns all the authenticated accesses in an organization registered.
     * Returns all the authenticated accesses in an organization registered.
     *
     * @param organizationId ID of an organization (required)
     * @return Authenticated accesses in an organization returned successfully. (status code 200)
     *         or Accesses were not found with these organizationId. (status code 400)
     */
    @ApiOperation(value = "Returns all the authenticated accesses in an organization registered.", nickname = "getAccessListInOrganization", notes = "Returns all the authenticated accesses in an organization registered.", response = OrganizationAuthenticatedAccess.class, responseContainer = "List", tags={ "organization", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Authenticated accesses in an organization returned successfully.", response = OrganizationAuthenticatedAccess.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Accesses were not found with these organizationId.") })
    @RequestMapping(value = "/access/organization/{organizationId}/authenticated",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<OrganizationAuthenticatedAccess>> getAccessListInOrganization(@ApiParam(value = "ID of an organization",required=true) @PathVariable("organizationId") Long organizationId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"organizationId\" : 0, \"access\" : { \"entranceTimestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"exitTimestamp\" : \"2000-01-23T04:56:07.000+00:00\" }, \"ldapId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /access/organization/{organizationId}/authenticated/{userIds} : Returns all the authenticated accesses in an organization registered of one or more users (userIds are separated by commas).
     * Returns all the authenticated accesses in an organization registered of one or more users (userIds are separated by commas).
     *
     * @param userIds One or more userIds (required)
     * @param organizationId ID of an organization (required)
     * @return Authenticated accesses in an organization returned successfully. (status code 200)
     *         or Accesses were not found with these organizationId and userIds. (status code 400)
     */
    @ApiOperation(value = "Returns all the authenticated accesses in an organization registered of one or more users (userIds are separated by commas).", nickname = "getAccessListInOrganizationOfUsers", notes = "Returns all the authenticated accesses in an organization registered of one or more users (userIds are separated by commas).", response = OrganizationAuthenticatedAccess.class, responseContainer = "List", tags={ "access", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Authenticated accesses in an organization returned successfully.", response = OrganizationAuthenticatedAccess.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Accesses were not found with these organizationId and userIds.") })
    @RequestMapping(value = "/access/organization/{organizationId}/authenticated/{userIds}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<OrganizationAuthenticatedAccess>> getAccessListInOrganizationOfUsers(@ApiParam(value = "One or more userIds",required=true) @PathVariable("userIds") List<Long> userIds,@ApiParam(value = "ID of an organization",required=true) @PathVariable("organizationId") Long organizationId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"organizationId\" : 0, \"access\" : { \"entranceTimestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"exitTimestamp\" : \"2000-01-23T04:56:07.000+00:00\" }, \"ldapId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /access/place/{placeId}/authenticated : Returns all the authenticated accesses in a place registered.
     * Returns all the authenticated accesses in a place registered.
     *
     * @param placeId ID of a place (required)
     * @return Authenticated accesses in a place returned successfully. (status code 200)
     *         or Accesses were not found with these placeId. (status code 400)
     */
    @ApiOperation(value = "Returns all the authenticated accesses in a place registered.", nickname = "getAccessListInPlace", notes = "Returns all the authenticated accesses in a place registered.", response = PlaceAuthenticatedAccess.class, responseContainer = "List", tags={ "access", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Authenticated accesses in a place returned successfully.", response = PlaceAuthenticatedAccess.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Accesses were not found with these placeId.") })
    @RequestMapping(value = "/access/place/{placeId}/authenticated",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<PlaceAuthenticatedAccess>> getAccessListInPlace(@ApiParam(value = "ID of a place",required=true) @PathVariable("placeId") Long placeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"access\" : { \"entranceTimestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"exitTimestamp\" : \"2000-01-23T04:56:07.000+00:00\" }, \"placeId\" : 0, \"ldapId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /access/place/{placeId}/authenticated/{userIds} : Returns all the authenticated accesses in a place registered of one or more users (userIds are separated by commas).
     * Returns all the authenticated accesses in a place registered of one or more users (userIds are separated by commas).
     *
     * @param userIds One or more userIds (required)
     * @param placeId ID of a place (required)
     * @return Authenticated accesses in a place returned successfully. (status code 200)
     *         or Accesses were not found with these placeId and userIds. (status code 400)
     */
    @ApiOperation(value = "Returns all the authenticated accesses in a place registered of one or more users (userIds are separated by commas).", nickname = "getAccessListInPlaceOfUsers", notes = "Returns all the authenticated accesses in a place registered of one or more users (userIds are separated by commas).", response = PlaceAuthenticatedAccess.class, responseContainer = "List", tags={ "access", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Authenticated accesses in a place returned successfully.", response = PlaceAuthenticatedAccess.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Accesses were not found with these placeId and userIds.") })
    @RequestMapping(value = "/access/place/{placeId}/authenticated/{userIds}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<PlaceAuthenticatedAccess>> getAccessListInPlaceOfUsers(@ApiParam(value = "One or more userIds",required=true) @PathVariable("userIds") List<Long> userIds,@ApiParam(value = "ID of a place",required=true) @PathVariable("placeId") Long placeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"access\" : { \"entranceTimestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"exitTimestamp\" : \"2000-01-23T04:56:07.000+00:00\" }, \"placeId\" : 0, \"ldapId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
