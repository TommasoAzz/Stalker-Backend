/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.qbteam.api;

import it.qbteam.model.AuthResponseAdmin;
import it.qbteam.model.AuthResponseUser;
import it.qbteam.model.AuthenticationDataAdmin;
import it.qbteam.model.AuthenticationDataUser;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-02-29T20:29:04.115+01:00[Europe/Berlin]")

@Validated
@Api(value = "authentication", description = "the authentication API")
public interface AuthenticationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /authentication/adminLogin : Lets the admin login via the authentication service.
     * Lets the admin login via the authentication service.
     *
     * @param authenticationDataAdmin  (optional)
     * @return Logged in successfully. (status code 200)
     *         or Incorrect credentials. (status code 400)
     */
    @ApiOperation(value = "Lets the admin login via the authentication service.", nickname = "adminLogin", notes = "Lets the admin login via the authentication service.", response = AuthResponseAdmin.class, tags={ "adminAuthentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Logged in successfully.", response = AuthResponseAdmin.class),
        @ApiResponse(code = 400, message = "Incorrect credentials.") })
    @RequestMapping(value = "/authentication/adminLogin",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<AuthResponseAdmin> adminLogin(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AuthenticationDataAdmin authenticationDataAdmin) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"token\" : \"token\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /authentication/adminLogout : Lets the admin logout from the system.
     * Lets the admin logout from the system.
     *
     * @return Logged out successfully. (status code 200)
     */
    @ApiOperation(value = "Lets the admin logout from the system.", nickname = "adminLogout", notes = "Lets the admin logout from the system.", tags={ "adminAuthentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Logged out successfully.") })
    @RequestMapping(value = "/authentication/adminLogout",
        method = RequestMethod.POST)
    default ResponseEntity<Void> adminLogout() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /authentication/userLogin : Lets the user login via the authentication service.
     * Lets the user login via the authentication service.
     *
     * @param authenticationDataUser  (optional)
     * @return Logged in successfully. (status code 200)
     *         or Incorrect credentials. (status code 400)
     */
    @ApiOperation(value = "Lets the user login via the authentication service.", nickname = "userLogin", notes = "Lets the user login via the authentication service.", response = AuthResponseUser.class, tags={ "userAuthentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Logged in successfully.", response = AuthResponseUser.class),
        @ApiResponse(code = 400, message = "Incorrect credentials.") })
    @RequestMapping(value = "/authentication/userLogin",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<AuthResponseUser> userLogin(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AuthenticationDataUser authenticationDataUser) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"token\" : \"token\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /authentication/userLogout : Lets the user logout from the system.
     * Lets the user logout from the system.
     *
     * @return Logged out successfully. (status code 200)
     */
    @ApiOperation(value = "Lets the user logout from the system.", nickname = "userLogout", notes = "Lets the user logout from the system.", tags={ "userAuthentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Logged out successfully.") })
    @RequestMapping(value = "/authentication/userLogout",
        method = RequestMethod.POST)
    default ResponseEntity<Void> userLogout() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /authentication/userRegistration : Lets the user registrate into the system.
     * Lets the user registrate into the system.
     *
     * @param authenticationDataUser  (optional)
     * @return Registered successfully. (status code 200)
     *         or Too weak password. (status code 400)
     *         or Account already present with this e-mail address. (status code 406)
     */
    @ApiOperation(value = "Lets the user registrate into the system.", nickname = "userRegistration", notes = "Lets the user registrate into the system.", response = AuthResponseUser.class, tags={ "userAuthentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Registered successfully.", response = AuthResponseUser.class),
        @ApiResponse(code = 400, message = "Too weak password."),
        @ApiResponse(code = 406, message = "Account already present with this e-mail address.") })
    @RequestMapping(value = "/authentication/userRegistration",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<AuthResponseUser> userRegistration(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) AuthenticationDataUser authenticationDataUser) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"token\" : \"token\", \"expirationDate\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
