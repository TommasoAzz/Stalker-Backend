/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.qbteam.api;

import it.qbteam.model.Organization;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "organization", description = "the organization API")
public interface OrganizationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /organization/{organizationId} : Gets the data of a single organization.
     * Gets the data of a single organization.
     *
     * @param organizationId ID of an organization. (required)
     * @return Organization returned successfully. (status code 200)
     *         or Organization not found. (status code 400)
     */
    @ApiOperation(value = "Gets the data of a single organization.", nickname = "getOrganizationById", notes = "Gets the data of a single organization.", response = Organization.class, tags={ "organization", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Organization returned successfully.", response = Organization.class),
        @ApiResponse(code = 400, message = "Organization not found.") })
    @RequestMapping(value = "/organization/{organizationId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Organization> getOrganizationById(@ApiParam(value = "ID of an organization.",required=true) @PathVariable("organizationId") Long organizationId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"image\", \"address\" : { \"number\" : 6, \"city\" : \"city\", \"street\" : \"street\", \"postCode\" : 1, \"state\" : \"state\" }, \"modifyDate\" : \"\", \"name\" : \"name\", \"lastChangeDate\" : \"2000-01-23T04:56:07.000+00:00\", \"trackingMode\" : \"authenticated\", \"description\" : \"description\", \"trackingArea\" : \"trackingArea\", \"id\" : 0, \"serverLDAP\" : \"serverLDAP\", \"creationDate\" : \"creationDate\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /organization : Returns the list of all organizations.
     * Returns the list of all organizations.
     *
     * @return Organizations returned successfully. (status code 200)
     */
    @ApiOperation(value = "Returns the list of all organizations.", nickname = "getOrganizationList", notes = "Returns the list of all organizations.", response = Organization.class, responseContainer = "List", tags={ "organization", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Organizations returned successfully.", response = Organization.class, responseContainer = "List") })
    @RequestMapping(value = "/organization",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Organization>> getOrganizationList() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"image\", \"address\" : { \"number\" : 6, \"city\" : \"city\", \"street\" : \"street\", \"postCode\" : 1, \"state\" : \"state\" }, \"modifyDate\" : \"\", \"name\" : \"name\", \"lastChangeDate\" : \"2000-01-23T04:56:07.000+00:00\", \"trackingMode\" : \"authenticated\", \"description\" : \"description\", \"trackingArea\" : \"trackingArea\", \"id\" : 0, \"serverLDAP\" : \"serverLDAP\", \"creationDate\" : \"creationDate\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /organization/{organizationId} : Updates one or more properties of a single organization.
     * Updates one or more properties of a single organization.
     *
     * @param organizationId ID of an organization. (required)
     * @param organization Organization that need to be added to the database (required)
     * @return Organization updated successfully. (status code 200)
     *         or Invalid organizationId supplied. (status code 400)
     *         or Organization not found. (status code 405)
     */
    @ApiOperation(value = "Updates one or more properties of a single organization.", nickname = "updateOrganization", notes = "Updates one or more properties of a single organization.", response = Organization.class, tags={ "organization", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Organization updated successfully.", response = Organization.class),
        @ApiResponse(code = 400, message = "Invalid organizationId supplied."),
        @ApiResponse(code = 405, message = "Organization not found.") })
    @RequestMapping(value = "/organization/{organizationId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Organization> updateOrganization(@ApiParam(value = "ID of an organization.",required=true) @PathVariable("organizationId") Long organizationId,@ApiParam(value = "Organization that need to be added to the database" ,required=true )  @Valid @RequestBody Organization organization) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"image\" : \"image\", \"address\" : { \"number\" : 6, \"city\" : \"city\", \"street\" : \"street\", \"postCode\" : 1, \"state\" : \"state\" }, \"modifyDate\" : \"\", \"name\" : \"name\", \"lastChangeDate\" : \"2000-01-23T04:56:07.000+00:00\", \"trackingMode\" : \"authenticated\", \"description\" : \"description\", \"trackingArea\" : \"trackingArea\", \"id\" : 0, \"serverLDAP\" : \"serverLDAP\", \"creationDate\" : \"creationDate\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
